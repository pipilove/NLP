"\ufeff<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n    <head>\r\n<meta name=\"csrf_token\" content=\"1Zy8QAGHLMTua0ckWDxbGdZU+JLJsM4C\"/>\r\n<meta name=\"csrf_token\" content=\"EDTc935YG1TJWfLLK8X0l7M+XFRz1sk8\"/>\r\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n        <meta http-equiv='Pragma' content='no-cache'/>\r\n\r\n        <script type=\"text/javascript\">\r\n            /*\r\n             JQuery is not compatible with PSP & NDSi\r\n             script execution will stop when the jquery import.\r\n             we should put the following script before the jquery is imported\r\n             */\r\n            var hardwarePlatform = navigator.platform.toLowerCase();\r\n            var agent = navigator.userAgent.toLowerCase();\r\n            var isPsp = (agent.indexOf(\"playstation\") != -1);\r\n            var isNdsi = (agent.indexOf(\"nintendo dsi\") != -1);\r\n            if (isPsp || isNdsi) {\r\n                window.location.href = \"notsupported.html\";\r\n            }\r\n        </script>\r\n\r\n        <script type=\"text/javascript\" src=\"../lib/jquery-1.7.2.min.js\"></script>\r\n        <script type=\"text/javascript\" src=\"../lib/log4javascript_lite.js\"></script>\r\n        <script type=\"text/javascript\" src=\"../js/redirect.js\"></script>\r\n\r\n        <title></title>\r\n\r\n        <script type=\"text/javascript\">\r\n            var DEFAULT_GATEWAY_IP = \"192.168.1.1\";\r\n            var DEFAULT_GATEWAY_DOMAIN = new Array();\r\n\t\t\tvar GATEWAY_DOMAIN = new Array();\r\n            var AJAX_HEADER = '../';\r\n            var AJAX_TAIL = '';\r\n            var AJAX_TIMEOUT = 30000;\r\n            \r\n            var MACRO_NO_SIM_CARD = '255';\r\n            var MACRO_CPIN_FAIL = '256';\r\n            var MACRO_PIN_READY = '257';\r\n            var MACRO_PIN_DISABLE = '258';\r\n            var MACRO_PIN_VALIDATE = '259';\r\n            var MACRO_PIN_REQUIRED = '260';\r\n            var MACRO_PUK_REQUIRED = '261';\r\n\r\n            var log = log4javascript.getNullLogger();            \r\n            var hardwarePlatform = navigator.platform.toLowerCase();\r\n            var agent = navigator.userAgent.toLowerCase();\r\n            \r\n            var isIpod = hardwarePlatform.indexOf(\"ipod\") != -1;\r\n            var isIphone = hardwarePlatform.indexOf(\"iphone\") != -1;\r\n            var isIpad =  hardwarePlatform.indexOf(\"ipad\") != -1;\r\n            var isAndroid = agent.indexOf(\"android\") !=-1;\r\n            \r\n            log.debug(\"INDEX : hardwarePlatform = \" + hardwarePlatform);\r\n            log.debug(\"INDEX : agent = \" + agent);\r\n            function gotoPageWithoutHistory(url) {\r\n                log.debug('MAIN : gotoPageWithoutHistory(' + url + ')');\r\n                window.location.replace(url);\r\n            }\r\n\r\n            // internal use only\r\n            function _recursiveXml2Object($xml) {\r\n                if ($xml.children().size() > 0) {\r\n                    var _obj = {};\r\n                    $xml.children().each(function() {\r\n                        var _childObj = ($(this).children().size() > 0) ? _recursiveXml2Object($(this)) : $(this).text();\r\n                        if ($(this).siblings().size() > 0 && $(this).siblings().get(0).tagName == this.tagName) {\r\n                            if (_obj[this.tagName] == null) {\r\n                                _obj[this.tagName] = [];\r\n                            }\r\n                            _obj[this.tagName].push(_childObj);\r\n                        }\r\n                        else {\r\n                            _obj[this.tagName] = _childObj;\r\n                        }\r\n                    });\r\n                    return _obj;\r\n                }\r\n                else {\r\n                    return $xml.text();\r\n                }\r\n            }\r\n\r\n            // convert XML string to an Object.\r\n            // $xml, which is an jQuery xml object.\r\n            function xml2object($xml) {\r\n                var obj = new Object();\r\n                if ($xml.find('response').size() > 0) {\r\n                    var _response = _recursiveXml2Object($xml.find('response'));\r\n                    obj.type = 'response';\r\n                    obj.response = _response;\r\n                }\r\n                else if ($xml.find('error').size() > 0) {\r\n                    var _code = $xml.find('code').text();\r\n                    var _message = $xml.find('message').text();\r\n                    log.warn('MAIN : error code = ' + _code);\r\n                    log.warn('MAIN : error msg = ' + _message);\r\n                    obj.type = 'error';\r\n                    obj.error = {\r\n                        code: _code,\r\n                        message: _message\r\n                    };\r\n                }\r\n                else if ($xml.find('config').size() > 0) {\r\n                    var _config = _recursiveXml2Object($xml.find('config'));\r\n                    obj.type = 'config';\r\n                    obj.config = _config;\r\n                }\r\n                else {\r\n                    obj.type = 'unknown';\r\n                }\r\n                return obj;\r\n            }\r\n\r\n            function getAjaxData(urlstr, callback_func, options) {\r\n                var myurl = AJAX_HEADER + urlstr + AJAX_TAIL;\r\n                var isAsync = true;\r\n                var nTimeout = AJAX_TIMEOUT;\r\n                var errorCallback = null;\r\n            \r\n                if (options) {\r\n                    if (options.sync) {\r\n                        isAsync = (options.sync == true) ? false : true;\r\n                    }\r\n                    if (options.timeout) {\r\n                        nTimeout = parseInt(options.timeout, 10);\r\n                        if (isNaN(nTimeout)) {\r\n                            nTimeout = AJAX_TIMEOUT;\r\n                        }\r\n            \r\n                    }\r\n                    errorCallback = options.errorCB;\r\n                }\r\n                var headers = {};\r\n                headers['__RequestVerificationToken'] = g_requestVerificationToken;\r\n            \r\n                $.ajax({\r\n                    async: isAsync,\r\n                    headers: headers,\r\n                    //cache: false,\r\n                    type: 'GET',\r\n                    timeout: nTimeout,\r\n                    url: myurl,\r\n                    //dataType: ($.browser.msie) ? \"text\" : \"xml\",\r\n                    error: function(XMLHttpRequest, textStatus) {\r\n                        try {\r\n                            if (jQuery.isFunction(errorCallback)) {\r\n                                errorCallback(XMLHttpRequest, textStatus);\r\n                            }\r\n                            log.error('MAIN : getAjaxData(' + myurl + ') error.');\r\n                            log.error('MAIN : XMLHttpRequest.readyState = ' + XMLHttpRequest.readyState);\r\n                            log.error('MAIN : XMLHttpRequest.status = ' + XMLHttpRequest.status);\r\n                            log.error('MAIN : textStatus ' + textStatus);\r\n                        }\r\n                        catch (exception) {\r\n                            log.error(exception);\r\n                        }\r\n                    },\r\n                    success: function(data) {\r\n                        log.debug('MAIN : getAjaxData(' + myurl + ') sucess.');\r\n                        log.trace(data);\r\n                        var xml;\r\n                        if (typeof data == 'string' || typeof data == 'number') {\r\n                            if (-1 != this.url.indexOf('/api/sdcard/sdcard')) {\r\n                                data = sdResolveCannotParseChar(data);\r\n                            }\r\n                            if (!window.ActiveXObject) {\r\n                                var parser = new DOMParser();\r\n                                xml = parser.parseFromString(data, 'text/xml');\r\n                            }\r\n                            else {\r\n                                //IE\r\n                                xml = new ActiveXObject('Microsoft.XMLDOM');\r\n                                xml.async = false;\r\n                                xml.loadXML(data);\r\n                            }\r\n                        }\r\n                        else {\r\n                            xml = data;\r\n                        }\r\n                        if (typeof callback_func == 'function') {\r\n                            callback_func($(xml));\r\n                        }\r\n                        else {\r\n                            log.error('callback_func is undefined or not a function');\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            function getConfigData(urlstr, callback_func, options) {\r\n                var myurl = '../' + urlstr + '';\r\n                //var myurl = urlstr + \"\";\r\n                var isAsync = true;\r\n                var nTimeout = AJAX_TIMEOUT;\r\n                var errorCallback = null;\r\n\r\n                if (options) {\r\n                    if (options.sync) {\r\n                        isAsync = (options.sync == true) ? false : true;\r\n                    }\r\n                    if (options.timeout) {\r\n                        nTimeout = parseInt(options.timeout, 10);\r\n                        if (isNaN(nTimeout)) {\r\n                            nTimeout = AJAX_TIMEOUT;\r\n                        }\r\n                    }\r\n                    errorCallback = options.errorCB;\r\n                }\r\n\r\n                $.ajax({\r\n                    async: isAsync,\r\n                    //cache: false,\r\n                    type: 'GET',\r\n                    timeout: nTimeout,\r\n                    url: myurl,\r\n                    //dataType: ($.browser.msie) ? \"text\" : \"xml\",\r\n                    error: function(XMLHttpRequest, textStatus, errorThrown) {\r\n                        try {\r\n                            log.debug('MAIN : getConfigData(' + myurl + ') error.');\r\n                            log.error('MAIN : XMLHttpRequest.readyState = ' + XMLHttpRequest.readyState);\r\n                            log.error('MAIN : XMLHttpRequest.status = ' + XMLHttpRequest.status);\r\n                            log.error('MAIN : textStatus ' + textStatus);\r\n                            if (jQuery.isFunction(errorCallback)) {\r\n                                errorCallback(XMLHttpRequest, textStatus);\r\n                            }\r\n                        }\r\n                        catch (exception) {\r\n                            log.error(exception);\r\n                        }\r\n                    },\r\n                    success: function(data) {\r\n                        log.debug('MAIN : getConfigData(' + myurl + ') success.');\r\n                        log.trace(data);\r\n                        var xml;\r\n                        if (typeof data == 'string' || typeof data == 'number') {\r\n                            if (!window.ActiveXObject) {\r\n                                var parser = new DOMParser();\r\n                                xml = parser.parseFromString(data, 'text/xml');\r\n                            }\r\n                            else {\r\n                                //IE\r\n                                xml = new ActiveXObject('Microsoft.XMLDOM');\r\n                                xml.async = false;\r\n                                xml.loadXML(data);\r\n                            }\r\n                        }\r\n                        else {\r\n                            xml = data;\r\n                        }\r\n                        if (typeof callback_func == 'function') {\r\n                            callback_func($(xml));\r\n                        }\r\n                        else {\r\n                            log.error('callback_func is undefined or not a function');\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            function getDomain(){\r\n                getConfigData(\"config/lan/config.xml\", function($xml){\r\n                    var ret = xml2object($xml);\r\n                    if(ret.type == \"config\")\r\n                    {\r\n                        DEFAULT_GATEWAY_DOMAIN.push(ret.config.landns.hgwurl.toLowerCase());\r\n\t\t\t\t\t\tif( typeof(ret.config.landns.mcdomain) != 'undefined' )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tGATEWAY_DOMAIN.push(ret.config.landns.mcdomain.toLowerCase());\r\n\t\t\t\t\t\t}\r\n                    }\r\n                }, {\r\n                   sync: true\r\n                });\r\n            }\r\n\r\n            function getQueryStringByName(item) {\r\n                var svalue = location.search.match(new RegExp('[\\?\\&]' + item + '=([^\\&]*)(\\&?)', 'i'));\r\n                return svalue ? svalue[1] : svalue;\r\n            }\r\n            \r\n            function isHandheldBrowser() {\r\n                var bRet = false;\r\n                if(0 == login_status){\r\n                    return bRet;\r\n                }               \r\n                if (isIphone || isIpod) {\r\n                    log.debug(\"INDEX : current browser is iphone or ipod.\");\r\n                    bRet = true;\r\n                }\r\n                else if (isPsp) {\r\n                    log.debug(\"INDEX : current browser is psp.\");\r\n                    bRet = true;\r\n                }\r\n\t\t\t\telse if (isIpad) {\r\n\t\t\t\t\tlog.debug(\"INDEX : current browser is ipad.\");\r\n\t\t\t\t\tbRet = true;\r\n\t\t\t\t}\r\n                else if (isAndroid) {\r\n                    log.debug(\"INDEX : current browser is android.\");\r\n                    bRet = true;\r\n                }\r\n                else {\r\n                    log.debug(\"INDEX : screen.height = \" + screen.height);\r\n                    log.debug(\"INDEX : screen.width = \" + screen.width);\r\n                    if (screen.height <= 320 || screen.width <= 320) {\r\n                        bRet = true;\r\n                        log.debug(\"INDEX : current browser screen size is small.\");\r\n                    }\r\n                }\r\n                log.debug(\"INDEX : isHandheldBrowser = \" + bRet);\r\n                return bRet;\r\n            }\r\n\r\n            function update_openNewWindow () {\r\n                if (window.location.href.indexOf('?updataredirect=') > -1) {\r\n                    var tmpUrl = window.location.href.substring(window.location.href.indexOf(\"?updataredirect=\"));\r\n                    var newUrl = \"http://\" + tmpUrl.substring(tmpUrl.indexOf(\"?updataredirect=\") + 16) + '/';\r\n\r\n                    document.getElementById(\"update_newPage\").setAttribute(\"href\", newUrl);\r\n                    document.getElementById(\"update_newPage\").setAttribute(\"target\", \"_blank\");\r\n                    if($.browser.msie) {\r\n                        $(\"#update_newPage\").get(0).click();\r\n                    } else {\r\n                        var evt = document.createEvent(\"MouseEvents\");  \r\n                        evt.initEvent(\"click\", true, true);  \r\n                        document.getElementById('update_newPage').dispatchEvent(evt);\r\n                    }\r\n                 }\r\n            }\r\n            \r\n            var g_requestVerificationToken = '';\r\n            function getAjaxToken() {\r\n                 getAjaxData('api/webserver/token', function($xml) {\r\n                    var ret = xml2object($xml);\r\n                     if ('response' == ret.type) {\r\n                         g_requestVerificationToken = ret.response.token;\r\n                         \r\n                     }\r\n                }, {\r\n                       sync: true\r\n                });\r\n            }\r\n            \r\n            getAjaxToken();\r\n\r\n            var gatewayAddr = \"\";\r\n            var conntection_status = null;\r\n            var service_status = null;\r\n            var login_status = null;\r\n            // get current settings gateway address\r\n            getAjaxData(\"api/dhcp/settings\", function($xml) {\r\n                var ret = xml2object($xml);\r\n                if (\"response\" == ret.type) {\r\n                    gatewayAddr = ret.response.DhcpIPAddress;\r\n                }\r\n            }, {\r\n                sync : true\r\n            }\r\n            );\r\n\r\n            // get connection status\r\n            getAjaxData(\"api/monitoring/status\", function($xml) {\r\n                var ret = xml2object($xml);\r\n                if (\"response\" == ret.type) {\r\n                    conntection_status = parseInt(ret.response.ConnectionStatus,10);\r\n                    service_status = parseInt(ret.response.ServiceStatus,10);\r\n                }\r\n            }, {\r\n                sync : true\r\n            }\r\n            );\r\n                        // get connection status\r\n            getAjaxData('config/global/config.xml', function($xml) {\r\n            var config_ret = xml2object($xml);  \r\n            login_status = config_ret.config.login;\r\n                \r\n            }, {\r\n                sync : true\r\n            }\r\n            );\r\n            if (\"\" == gatewayAddr) {\r\n                gatewayAddr = DEFAULT_GATEWAY_IP;\r\n            }\r\n\r\n            var href = \"http://\" + DEFAULT_GATEWAY_IP;\r\n            try {\r\n                href = window.location.href;\r\n            }\r\n            catch(exception) {\r\n                href = \"http://\" + DEFAULT_GATEWAY_IP;\r\n            }\r\n            // get incoming url from querystring\r\n            var incoming_url = href.substring(href.indexOf(\"?url=\") + 5);\r\n            // truncate http://\r\n            if (incoming_url.indexOf(\"//\") > -1) {\r\n                incoming_url = incoming_url.substring(incoming_url.indexOf(\"//\") + 2);\r\n            }\r\n            //get *.html\r\n            var incoming_html = \"\";\r\n            if (incoming_url.indexOf(\".html\") > -1) {\r\n                incoming_html = incoming_url.substring(incoming_url.lastIndexOf(\"/\") + 1, incoming_url.length);\r\n            }\r\n            // truncate tail\r\n            if (incoming_url.indexOf(\"/\") !=  -1) {\r\n                incoming_url = incoming_url.substring(0, incoming_url.indexOf(\"/\"));\r\n            }\r\n\r\n            incoming_url = incoming_url.toLowerCase();\r\n            var bIsSmallPage = isHandheldBrowser();\r\n            // var prefix = \"http://\" + gatewayAddr;\r\n            var g_indexIncomingUrlIsGateway = false;\r\n            // if incoming url == 192.168.1.1 or MobileWifi.home then goto login\r\n            // page\r\n            window.name = getQueryStringByName(\"version\");\r\n            //check login status\r\n            var LOGIN_STATES_SUCCEED = \"0\";\r\n            var userLoginState = LOGIN_STATES_SUCCEED;\r\n            getAjaxData('api/user/state-login', function($xml) {\r\n                var ret = xml2object($xml);\r\n                if (ret.type == 'response') {\r\n                    userLoginState=ret.response.State;\r\n                }\r\n            }, {\r\n                sync: true\r\n            });\r\n\r\n            $(document).ready(function() {\r\n\r\n                update_openNewWindow();\r\n\r\n                if(true == bIsSmallPage) {\r\n                    if (userLoginState != LOGIN_STATES_SUCCEED) {\r\n\t\t\t\t\t\tgetAjaxData('config/global/config.xml', function($xml) {\r\n\t\t\t\t\t\t\tvar config_ret = xml2object($xml);\r\n\t\t\t\t\t\t\tif(config_ret.type == 'config') {\r\n\t\t\t\t\t\t\t\tif(config_ret.config.commend_enable == '1') {\r\n\t\t\t\t\t\t\t\t\tgotoPageWithoutHistory(\"../html/commend.html\");\r\n\t\t\t\t\t\t\t\t\tg_indexIncomingUrlIsGateway = true;\r\n\t\t\t\t\t\t\t\t}else {\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tg_indexIncomingUrlIsGateway = redirectOnCondition(\"\",'index');\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},{\r\n\t\t\t\t\t\t\tsync: true\r\n\t\t\t\t\t\t});\r\n                        \r\n                    } else {                    \r\n\t\t\t\t\t\tg_indexIncomingUrlIsGateway = redirectOnCondition(\"\",'index');                   \r\n                    }\r\n                } else {\r\n                    g_indexIncomingUrlIsGateway = redirectOnCondition(\"\",'index');\r\n                }\r\n\r\n                $( function() {\r\n                    getDomain();\r\n                    if (g_indexIncomingUrlIsGateway) {\r\n                        return;\r\n                    }\r\n                    else if (conntection_status == 901 && service_status == 2) {\r\n                        if ((incoming_url.indexOf(gatewayAddr)==0)|| (incoming_url.indexOf(DEFAULT_GATEWAY_DOMAIN)==0) \r\n\t\t\t\t\t\t || (incoming_url.indexOf(GATEWAY_DOMAIN)==0)){\r\n                               gotoPageWithoutHistory(\"home.html\");\r\n                         }\r\n                         else {\r\n                              gotoPageWithoutHistory(\"opennewwindow.html\");\r\n                         }\r\n                    }\r\n                    else {\r\n                        gotoPageWithoutHistory(\"home.html\");\r\n                    }\r\n                });\r\n\r\n             });\r\n        </script>\r\n    </head>\r\n\r\n    <body style=\"background-color: #FFFFFF;\">\r\n        <div>\r\n            <a id=\"update_newPage\" href=\"#\" target=\"_blank\"></a>\r\n        </div>\r\n        <noscript>\r\n            Sorry, your browser does not support javascript.\r\n        </noscript>\r\n    </body>\r\n</html>"